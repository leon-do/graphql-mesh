schema {
  query: Query
}

type countries_Continent {
  code: ID!
  countries: [countries_Country!]!
  name: String!
}

input countries_ContinentFilterInput {
  code: countries_StringQueryOperatorInput
}

type countries_Country {
  awsRegion: String!
  capital: String
  code: ID!
  continent: countries_Continent!
  currencies: [String!]!
  currency: String
  emoji: String!
  emojiU: String!
  languages: [countries_Language!]!
  name(lang: String): String!
  native: String!
  phone: String!
  phones: [String!]!
  states: [countries_State!]!
  subdivisions: [countries_Subdivision!]!
}

input countries_CountryFilterInput {
  code: countries_StringQueryOperatorInput
  continent: countries_StringQueryOperatorInput
  currency: countries_StringQueryOperatorInput
  name: countries_StringQueryOperatorInput
}

type countries_Language {
  code: ID!
  name: String!
  native: String!
  rtl: Boolean!
}

input countries_LanguageFilterInput {
  code: countries_StringQueryOperatorInput
}

type Query {
  countries_continent(code: ID!): countries_Continent
  countries_continents(filter: countries_ContinentFilterInput = {}): [countries_Continent!]!
  countries_countries(filter: countries_CountryFilterInput = {}): [countries_Country!]!
  countries_country(code: ID!): countries_Country
  countries_language(code: ID!): countries_Language
  countries_languages(filter: countries_LanguageFilterInput = {}): [countries_Language!]!
}

type countries_State {
  code: String
  country: countries_Country!
  name: String!
}

input countries_StringQueryOperatorInput {
  eq: String
  in: [String!]
  ne: String
  nin: [String!]
  regex: String
}

type countries_Subdivision {
  code: ID!
  emoji: String
  name: String!
}